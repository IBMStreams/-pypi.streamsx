/* Additional includes go here */

#include "splpy.h"
#include "splpy_funcop.h"

using namespace streamsx::topology;

<%SPL::CodeGen::implementationPrologue($model);%>

@include "../pyspltuple.cgt"
<%
 # Select the Python wrapper function
 my $pywrapfunc= $pystyle . '_in';
%>

// Constructor
MY_OPERATOR::MY_OPERATOR() :
   funcop_(NULL)
{
    funcop_ = new SplpyFuncOp(this, "<%=$pywrapfunc%>");
}


// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
    delete funcop_;
}

// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
    SplpyOp::prepareToShutdown();
}

// Tuple processing for non-mutating ports
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
  IPort0Type const &ip = static_cast<IPort0Type const &>(tuple);

<%
print splpy_inputtuple2value($pystyle);
%>

<%if ($pystyle eq 'dict') {%>
@include "../pyspltuple2dict.cgt"
  SPL::int32 spl_hash = streamsx::topology::Splpy::pyTupleHash(funcop_->function_, value);
  OPort0Type oTemptuple; //  (ip, spl_hash);
  oTemptuple.assignFrom(tuple, false);
  OPort0Type otuple(oTemptuple, spl_hash); //  (ip, spl_hash);

<%}%>
<%if ($pystyle ne 'dict') {%>
  SPL::int32 spl_hash = streamsx::topology::Splpy::pyTupleHash(funcop_->function_, value);

  OPort0Type otuple(value, spl_hash);
<%}%>
  // submit tuple
  submit(otuple, 0);
}

<%SPL::CodeGen::implementationEpilogue($model);%>
